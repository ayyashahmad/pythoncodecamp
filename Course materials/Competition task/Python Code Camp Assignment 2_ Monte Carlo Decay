{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Python Code Camp Assignment 2: Monte Carlo Decay","provenance":[{"file_id":"1jY77cYof-wqGetw9wHMnvpzMsJA2tTRt","timestamp":1635620700872}],"authorship_tag":"ABX9TyNY+bGOZ43b7JJMQyr2CpWd"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"fnSjul-El23Z"},"source":["Let's simulate radioactivity using Monte Carlo simulation!\n","\n","**TASK 1**: Preparing atoms\n","\n"," Using `np.linspace`, or `np.ones` generate a list called `atoms` containing n atoms where n = 100 and each atom in the list has a value of 1. This shows that all atoms are undecayed. When an atom decays, its value will turn into 0.\n","\n","Next, generate a list called `random` where there are n=100 random values from 0 to 1 using the code below:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fb29o6w8vTbe","executionInfo":{"status":"ok","timestamp":1640268372370,"user_tz":-480,"elapsed":4,"user":{"displayName":"Ayyash Ahmad","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgJXwgr7x7IEXfbdT-OxAUW47WAGbdjCkH2L-Zqsw=s64","userId":"17632978179708866392"}},"outputId":"b12542bc-25bc-41dc-fc45-f3c21220841c"},"source":["import numpy as np\n","random = np.random.rand(100)\n","print(random)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.86593852 0.41089519 0.84174966 0.06469714 0.70991494 0.83043325\n"," 0.11749799 0.80006255 0.36751464 0.72081133 0.6023264  0.2377597\n"," 0.78378635 0.44558246 0.61483252 0.59810364 0.95567585 0.77032237\n"," 0.46114585 0.4473842  0.14688019 0.22895414 0.80822688 0.6961767\n"," 0.83710846 0.14935516 0.28904491 0.23279904 0.30234863 0.90363778\n"," 0.51223758 0.65139111 0.33796002 0.48289617 0.01745553 0.41330803\n"," 0.24772101 0.94819174 0.89149545 0.33395314 0.95206031 0.78170533\n"," 0.6704921  0.77767976 0.68392116 0.5908703  0.72756013 0.7427459\n"," 0.11287925 0.85621545 0.15567932 0.41027784 0.65233588 0.95918468\n"," 0.81529782 0.91135597 0.68902409 0.4701379  0.64872009 0.00569674\n"," 0.46100912 0.0248983  0.28127428 0.39925521 0.6144108  0.04774405\n"," 0.28675299 0.55671009 0.27238682 0.40787374 0.81510355 0.47019977\n"," 0.01163383 0.93899566 0.76664532 0.81919422 0.65223166 0.33443248\n"," 0.81363376 0.3676004  0.21038264 0.31032299 0.53159848 0.14040013\n"," 0.10294809 0.47365094 0.32200491 0.36289818 0.30532362 0.34355251\n"," 0.05260216 0.95138245 0.68540221 0.63033971 0.5320848  0.54702909\n"," 0.19276208 0.55836428 0.24802299 0.82305862]\n"]}]},{"cell_type":"markdown","metadata":{"id":"f552r2t_v0w0"},"source":["**TASK 2**: Half-life\n","\n","The probability of an atom decaying given time $t$ is:\n","\n","$P(t)=1-2^\\frac{-t}{\\lambda}$\n","\n","where $\\lambda$ is the half-life of the atom.\n","\n","Using `np.linspace` function, generate a timespace `t` that goes from 0 to 100 seconds, with a resolution of 1000 data points."]},{"cell_type":"markdown","metadata":{"id":"xd992h6wxiu3"},"source":["**TASK 3**: Running the simulation\n","\n","Firstly, make 2 empty lists called `decayed_atoms` and `undecayed atoms` respectively.\n","\n","Using a `for` loop, for every increment of `t`:\n","\n","1) Calculate the probability of decay, $P(t)$.\n","\n","2) Compare the value of $P(t)$ to every element in `random`. If the value of an element is less than $P(t)$, the corresponding index in the `atoms` list will turn into 0. Run and study the code below to help you write this part out:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Yungit3x7-v","executionInfo":{"status":"ok","timestamp":1640268510832,"user_tz":-480,"elapsed":295,"user":{"displayName":"Ayyash Ahmad","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgJXwgr7x7IEXfbdT-OxAUW47WAGbdjCkH2L-Zqsw=s64","userId":"17632978179708866392"}},"outputId":"8b2d23f9-9181-4662-eda1-66504d105af6"},"source":["A=[7,7,7,7,7,7,7,7,7]\n","B=[0,2,8,4,1,9,4,9,6]\n","compare_value=5\n","\n","A=[2 if i<compare_value else 7 for i in B] \n","#element in A will turn into 2 if the corresponding index in B is less than compare_value (5)\n","\n","print(A)"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 2, 7, 2, 2, 7, 2, 7, 7]\n"]}]},{"cell_type":"markdown","metadata":{"id":"7ihMC6o310-z"},"source":["3) Using the function `count()`, count how many atoms in the `atoms` list have decayed (has value of 0) and still undecayed (has value of 1). Append the values to the empty list `decayed_atoms` and `undecayed atoms` respectively using the `append()` function. Here is an example of how to use the `count()` function:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kXoRRoWo3Aiq","executionInfo":{"status":"ok","timestamp":1640268577381,"user_tz":-480,"elapsed":331,"user":{"displayName":"Ayyash Ahmad","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgJXwgr7x7IEXfbdT-OxAUW47WAGbdjCkH2L-Zqsw=s64","userId":"17632978179708866392"}},"outputId":"6e3d75f8-b3d6-4f6f-c399-3684cfe09719"},"source":["A=[0,1,2,4,5,2,2,1,2,3,4,5,3,0,0]\n","\n","print(A.count(0)) #count how many zeros are in the list\n","print(A.count(2)) #count how many 2's are in the list\n","print(A.count(8)) #count how many 8's are in the list"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","4\n","0\n"]}]},{"cell_type":"markdown","metadata":{"id":"RZlS6n0C3wfb"},"source":["**TASK 4**: Plot and simulate\n","\n","Using `searchsorted()` function, determine the half-life obtained from our simulation, by finding the index in our `decayed_atoms` list when $n/2$ atoms have decayed for the first time. Find the time in `t` which corresponds to this index. Print this value.\n","\n","The code below shows an example of using the `searchsorted()` function:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UhthpjP-6GSv","executionInfo":{"status":"ok","timestamp":1640268654838,"user_tz":-480,"elapsed":312,"user":{"displayName":"Ayyash Ahmad","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgJXwgr7x7IEXfbdT-OxAUW47WAGbdjCkH2L-Zqsw=s64","userId":"17632978179708866392"}},"outputId":"1458cf44-3094-4039-81e5-e7deae82a8be"},"source":["import numpy as np\n","A=(0,13,22,311,450,524,611,722,853,934)\n","find_index=np.searchsorted(A, 400) #find the first index in A where the element equals to or exceeds 400)\n","\n","print(find_index)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"markdown","metadata":{"id":"if-WNezwFB1C"},"source":["On the same graph, plot the number of decayed and undecayed atoms respectively (y-axis) vs time (x-axis). Plot a vertical line to indicate the half-life obtained from our simulation. Add title, axis name and units, and legend to your plot."]}]}
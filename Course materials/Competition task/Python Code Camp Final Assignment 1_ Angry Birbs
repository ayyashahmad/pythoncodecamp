{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Python Code Camp Final Assignment 1: Angry Birbs","provenance":[{"file_id":"1zhKbpnScQ_d_6F3cM4DP8YdVoHHsAq3X","timestamp":1635614369466}],"authorship_tag":"ABX9TyPTOePNmytwe5M3KB7YAWSI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"i0du1EqXf5b2"},"source":["Let's simulate the mega-hit mobile game, Angry Birbs! (name changed to avoid copyright infringement)\n","\n","Imagine you are Red. You need to find a way to reach the Pig fortress but they are located very, very far away. Your goal is to launch your body from a **slingshot located 10m above ground** and **find the optimum angle to reach the maximum distance travelled**.\n","\n","Here are some assumptions you should make:\n","\n","*  Your initial (launch) speed is constant at **$20 ms^-$$^1$**\n","*   No air friction\n","*   The Earth is flat\n","* Gravity pulls you down at **$9.81 ms^-$$^2$**"]},{"cell_type":"markdown","metadata":{"id":"WCmLjYErh2l4"},"source":["**TASK 1**: Using `scipy.integrate.odeint` to track path of projectile.\n","\n","This module will help us to plot the position and velocity of our projectile (Red) at every time. The code below shows an example of a projectile with the following properties:\n","*   Time of trajectory: 0 to 100 seconds, 100 plot points\n","*   Initial (x,y) position (in **$m$**) = (0,10)\n","*   Initial (x,y) velocities (in **$ms^-$$^1$**) = (50,100)\n","*   Acceleration in (x,y) coordinates (in **$ms^-$$^2$**) = (1,-2.5)\n","\n","Study the codes below and find a way to manipulate it to solve our problem. You may need to parameterise the initial conditions such that it can take the initial value of the launch angle and convert it to the x and y component of initial velocity. Hint: TRIGONOMETRY!\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"HSCvPhgciDaM","executionInfo":{"status":"ok","timestamp":1641373626615,"user_tz":-480,"elapsed":363,"user":{"displayName":"Ayyash Ahmad","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgJXwgr7x7IEXfbdT-OxAUW47WAGbdjCkH2L-Zqsw=s64","userId":"17632978179708866392"}},"outputId":"ee9da290-2745-4283-8119-e261e4682722"},"source":["import scipy.integrate as spi\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","x=np.radians(80)\n","t=np.linspace(0,100,1000) #(initial time, final time, no. of data points)\n","initial_conditions=[0,10,10*np.cos(x) ,10*np.sin(x)] #[initial x-position, initial y-position, initial x-velocity, initial y-velocity]\n","\n","def f(xy,t):\n","  rx=xy[0] #x-position (in metres)\n","  ry=xy[1] #y-position (in metres)\n","  vx=xy[2] #x-component of velocity (in m/s)\n","  vy=xy[3] #y-component of velocity (in m/s)\n","  ax=0 #x-component of acceleration (in m/s^-2)\n","  ay=-9.81 #y-component of acceleration (in m/s^-2)\n","  if ry<0:\n","    [vx,vy,ax,ay]=[0,0,0,0]\n","  return [vx,vy,ax,ay]\n","\n","#SOLVING ODE\n","soln=spi.odeint(f,initial_conditions,t)\n","rx=soln[:,0] #soln of x-position at all times        \n","ry=soln[:,1] #soln of y-position at all times\n","vx=soln[:,2] #soln of x-velocity at all times\n","vy=soln[:,3] #soln of y-velocity at all times\n","\n","plt.figure(0)\n","plt.plot(rx,ry, '-',label='trajectory')\n","plt.axhline(0,ls='-',color='black')\n","plt.title('Trajectory example')\n","plt.axis('equal')\n","plt.xlabel('x position (m)')\n","plt.ylabel('y position (m)')\n","plt.legend()\n","plt.show()\n"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mKQXKPyn5-Tb"},"source":["Add an `if` function in the `def f(xy,t)` function so that the **trajectory stops when it hits the ground**. \n","\n","This code for example, sets the velocity and acceleration at (3,5) **$ms^-$$^1$** and (0,1) **$ms^-$$^2$** respectively when the projectile is at a height of more than 5 m:\n","\n","```\n","if ry>=5:\n","  (vx,vy,ax,ay)=(3,5,0,1)\n","```\n","Test an **initial launch angle of 10°**. Use the `print` function to print values of initial x and y displacement, `rx` and `ry` to check if your codes are running properly.\n","\n","Then, **plot the graph of the projectile**. Make sure your graph has the important detail (title, axes names and units, legend, lines drawn to show where the ground and the height of the catapult are)\n","\n","Create an **empty list named `total_distance`** and **append the value of the total distance travelled in `rx` to that empty list. Hint: Where is the index in `rx` that records the total distance Red travelled? The first index? Middle? Final?\n","\n","Also, create an **empty list named `land_angle`** and **append the value of the landing angle** that Red makes with the ground to that empty list. How can you obtain the landing angle from the lists `rx`,`ry`,`vx` or `vy`? Hint: TRIGONOMETRY!\n","\n","Here's an example for appending an index from a list to another empty list:\n","\n","Input:\n","```\n","d=[41,13,5,12,17]\n","e=[0,6,21]\n","empty_list=[]\n","\n","empty_list.append(d[2]) #append 2nd index (5) from d\n","empty_list.append(d[-1]) #append the final index (17) from d\n","empty_list.append(d[-2]/e[1]) #append the value of 2nd final index (12) from d divided by 1st index (6) from e\n","\n","print(empty_list)\n","```\n","Output:\n","```\n","[5,17,2.0]\n","```"]},{"cell_type":"markdown","metadata":{"id":"ndj4ZvU4ol1q"},"source":["**TASK 2**: Try all the angles!\n","\n","Using `np.linspace` function, make a **list of different possible angles** (between 0° and 90°) that you can plug in to find the optimum angle for maximum displacement. Use a loop function to plot trajectories for different initial angles. Here's an example of a `for` loop:\n","\n","Input:\n","```\n","x=[0,1,2,3,4]\n","for i in x:\n","  print(i+2)\n","```\n","\n","Output:\n","```\n","2\n","3\n","4\n","5\n","6\n","```"]},{"cell_type":"markdown","metadata":{"id":"ZSbhcOSgCmJr"},"source":["**TASK 3**: Plotting distance vs angles\n","\n","Using `matplotlib.pyplot` module, plot a graph of **distance travelled (y-axis) vs initial angle (x-axis)**. What is the **optimum angle** that gives the maximum distance in this case?\n","\n","Calculate the **sum of each launch angle and its respective landing angle**. Then plot another graph of **distance travelled (y-axis) vs sum of launch and landing angles (x-axis)**. Add a **vertical line to mark the 90 degree value** on that graph.\n","\n","From the second graph, what can you conclude about the **relationship between the launch and the landing angle** in order to obtain the **optimum angle** for max displacement?"]}]}